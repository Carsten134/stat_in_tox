if (NA %in% c(m_time, m_cost, m_co2, m_sport)) {
return(NA)
} else {
return(weight_time*m_time + weight_cost*m_cost + weight_co2*m_co2 + weight_sport*m_sport)
}
}
mobscore_data <- data %>%
group_by(path_id) %>%
summarize(PKW_Mobscore = mobscore(PKW_Zeit, PKW_Kosten, PKW_CO2, PKW_Bewegung),
Pedelec_Mobscore = mobscore(Pedelec_Zeit, Pedelec_Kosten, Pedelec_CO2, Pedelec_Bewegung),
Fahrrad_Mobscore = mobscore(Fahrrad_Zeit, Fahrrad_Kosten, Fahrrad_CO2, Fahrrad_Bewegung),
OeV_Mobscore = mobscore(OeV_Zeit, OeV_Kosten, OeV_CO2, OeV_Bewegung),
OeV_Fahrrad_Mobscore = mobscore(OeV_Fahrrad_Zeit, OeV_Fahrrad_Kosten, OeV_Fahrrad_CO2, OeV_Fahrrad_Bewegung),
Auto_OeV_Mobscore = mobscore(Auto_OeV_Zeit, Auto_OeV_Kosten, Auto_OeV_CO2, Auto_OeV_Bewegung),
E_Auto_Mobscore = mobscore(E_Auto_Zeit, E_Auto_Kosten, E_Auto_CO2, E_Auto_Bewegung),
Fuss_Weg_Mobscore = mobscore(Fuss_Weg_Zeit, Fuss_Weg_Kosten, Fuss_Weg_CO2, Fuss_Weg_Bewegung))
data <- inner_join(data, mobscore_data, by = c("path_id" = "path_id"))
# min and max vals
min_ind <- function(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met) {
return(
which.min(
c(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met)
)
)
}
max_ind <- function(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met) {
return(which.max(
(
replace_na(c(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met),0)
)
)
)
}
most_effective <- data %>%
group_by(path_id) %>%
summarize(Kosten_eff_Verkehrsmittel = min_ind(PKW_Kosten, Pedelec_Kosten, Fahrrad_Kosten, OeV_Kosten, OeV_Fahrrad_Kosten, Auto_OeV_Kosten, E_Auto_Kosten, Fuss_Weg_Kosten),
Co2_eff_Verkehrsmittel = min_ind(PKW_CO2, Pedelec_CO2, Fahrrad_CO2, OeV_CO2, OeV_Fahrrad_CO2, Auto_OeV_CO2, E_Auto_CO2, Fuss_Weg_CO2),
Zeit_eff_Verkehrsmittel = min_ind(1.1*PKW_Zeit, Pedelec_Zeit, Fahrrad_Zeit, OeV_Zeit, OeV_Fahrrad_Zeit, Auto_OeV_Zeit, E_Auto_Zeit, Fuss_Weg_Zeit),
Bewegung_eff_Verkehrsmittel = max_ind(PKW_Bewegung, Pedelec_Bewegung, Fahrrad_Bewegung, OeV_Bewegung, OeV_Fahrrad_Bewegung, Auto_OeV_Bewegung, E_Auto_Bewegung, Fuss_Weg_Bewegung),
Nutzen_eff_Verkehrsmittel = max_ind(PKW_Mobscore, Pedelec_Mobscore, Fahrrad_Mobscore, OeV_Mobscore, OeV_Fahrrad_Mobscore, Auto_OeV_Mobscore, E_Auto_Mobscore, Fuss_Weg_Mobscore))
min_ind <- function(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met) {
index <- which.min(c(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met))
if (length(index) == 0) {
return(NA)
} else if (index == 1) {
return("Auto")
} else if (index == 2) {
return("Pedelec")
} else if (index == 3) {
return("Fahrrad")
} else if (index == 4) {
return("OeV")
} else if (index == 5) {
return("Oev_Fahrrad")
} else if (index == 6) {
return("Auto_Oev")
} else if (index == 7) {
return("E-Auto")
} else if (index == 8) {
return("Zu Fuss")
} else {
return(NA)
}
}
max_ind <- function(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met) {
index <- which.max(replace_na(c(car_met, ped_met, bike_met, pub_met, bike_ride_met, park_ride_met, e_car_met, walk_met),0))
if (length(index) == 0) {
return(NA)
} else if (index == 1) {
return("Auto")
} else if (index == 2) {
return("Pedelec")
} else if (index == 3) {
return("Fahrrad")
} else if (index == 4) {
return("OeV")
} else if (index == 5) {
return("Oev_Fahrrad")
} else if (index == 6) {
return("Auto_Oev")
} else if (index == 7) {
return("E-Auto")
} else if (index == 8) {
return("Zu Fuss")
} else {
return(NA)
}
}
most_effective <- data %>%
group_by(path_id) %>%
summarize(Kosten_eff_Verkehrsmittel = min_ind(PKW_Kosten, Pedelec_Kosten, Fahrrad_Kosten, OeV_Kosten, OeV_Fahrrad_Kosten, Auto_OeV_Kosten, E_Auto_Kosten, Fuss_Weg_Kosten),
Co2_eff_Verkehrsmittel = min_ind(PKW_CO2, Pedelec_CO2, Fahrrad_CO2, OeV_CO2, OeV_Fahrrad_CO2, Auto_OeV_CO2, E_Auto_CO2, Fuss_Weg_CO2),
Zeit_eff_Verkehrsmittel = min_ind(1.1*PKW_Zeit, Pedelec_Zeit, Fahrrad_Zeit, OeV_Zeit, OeV_Fahrrad_Zeit, Auto_OeV_Zeit, E_Auto_Zeit, Fuss_Weg_Zeit),
Bewegung_eff_Verkehrsmittel = max_ind(PKW_Bewegung, Pedelec_Bewegung, Fahrrad_Bewegung, OeV_Bewegung, OeV_Fahrrad_Bewegung, Auto_OeV_Bewegung, E_Auto_Bewegung, Fuss_Weg_Bewegung),
Nutzen_eff_Verkehrsmittel = max_ind(PKW_Mobscore, Pedelec_Mobscore, Fahrrad_Mobscore, OeV_Mobscore, OeV_Fahrrad_Mobscore, Auto_OeV_Mobscore, E_Auto_Mobscore, Fuss_Weg_Mobscore))
data <- inner_join(data, most_effective, by = c("path_id" = "path_id"))
write.csv2(data, "C:/Users/carst/Desktop/Ecolibro/Projekte/Reutlingen/Data/Ergebnisse_Reutlingen_14_04.csv")
data <- data.frame(pi = c(14,9,4,4,4,4,4),
u = c(6, 11,11, 6,6,6,6),
y = c(3,-9.5, 3, 15.5, 3,3,3),
m = c(17, -0.5, 7, 19.15, 7,7,7))
library(tidyverse)
data <- data.frame(pi = c(14,9,4,4,4,4,4),
u = c(6, 11,11, 6,6,6,6),
y = c(3,-9.5, 3, 15.5, 3,3,3),
m = c(17, -0.5, 7, 19.15, 7,7,7),
t = c(1,2,3,4,5,6,7))
data %>% ggplot(aes(x = t)) +
geom_line(aes(y = pi), color = red,
size = 1) +
geom_line(aes(y = y), color = blue)
data %>% ggplot(aes(x = t)) +
geom_line(aes(y = pi,
color = midnightblue),
size = 1) +
geom_line(aes(y = y), color = blue)
data %>% ggplot(aes(x = t)) +
geom_line(aes(y = pi,
color = midnightblue),
size = 1) +
geom_line(aes(y = y,
color = blue))
data %>% ggplot(aes(x = t)) +
geom_line(aes(y = pi,
color = red),
size = 1) +
geom_line(aes(y = y,
color = blue))
data <- data.frame(pi = c(14,9,4,4,4,4,4, 3,-9.5, 3, 15.5, 3,3,3, 17, -0.5, 7, 19.15, 7,7,7, 6, 11, 11, 6, 6, 6, 6),
group = c("pi", "pi", "pi", "pi", "pi", "pi", "pi", "y", "y", "y", "y", "y", "y", "y", "y", "m", "m", "m", "m", "m", "m", "m", "u", "u", "u", "u", "u", "u", "u"),
t = c(1,2,3,4,5,6,7))
data <- data.frame(pi = c(14,9,4,4,4,4,4, 3,-9.5, 3, 15.5, 3,3,3, 17, -0.5, 7, 19.15, 7,7,7, 6, 11, 11, 6, 6, 6, 6),
group = c("pi", "pi", "pi", "pi", "pi", "pi", "pi", "y", "y", "y", "y", "y", "y", "y", "y", "m", "m", "m", "m", "m", "m", "m", "u", "u", "u", "u", "u", "u", "u"))
data <- data.frame(pi = c(14,9,4,4,4,4,4, 3,-9.5, 3, 15.5, 3,3,3, 17, -0.5, 7, 19.15, 7,7,7, 6, 11, 11, 6, 6, 6, 6),
group = c("pi", "pi", "pi", "pi", "pi", "pi", "pi", "y", "y", "y", "y", "y", "y", "y", "m", "m", "m", "m", "m", "m", "m", "u", "u", "u", "u", "u", "u", "u"))
data <- data.frame(y = c(14,9,4,4,4,4,4, 3,-9.5, 3, 15.5, 3,3,3, 17, -0.5, 7, 19.15, 7,7,7, 6, 11, 11, 6, 6, 6, 6),
group = c("pi", "pi", "pi", "pi", "pi", "pi", "pi", "y", "y", "y", "y", "y", "y", "y", "m", "m", "m", "m", "m", "m", "m", "u", "u", "u", "u", "u", "u", "u"))
data %>% ggplot(aes(y = y,
color = group)) +
geom_line(size = 1)
data %>% ggplot(aes(y = y,
color = group)) +
geom_line(aes(x = 1:7), size = 1)
data %>% ggplot(aes(y = y,
color = group)) +
geom_line(aes(x = 1:28), size = 1)
data <- data.frame(y = c(14,9,4,4,4,4,4, 3,-9.5, 3, 15.5, 3,3,3, 17, -0.5, 7, 19.15, 7,7,7, 6, 11, 11, 6, 6, 6, 6),
x = c(1,2,3,4,5,6,7, 1,2,3,4,5,6,7, 1,2,3,4,5,6,7, 1,2,3,4,5,6,7)
group = c("pi", "pi", "pi", "pi", "pi", "pi", "pi", "y", "y", "y", "y", "y", "y", "y", "m", "m", "m", "m", "m", "m", "m", "u", "u", "u", "u", "u", "u", "u"))
data <- data.frame(y = c(14,9,4,4,4,4,4, 3,-9.5, 3, 15.5, 3,3,3, 17, -0.5, 7, 19.15, 7,7,7, 6, 11, 11, 6, 6, 6, 6),
x = c(1,2,3,4,5,6,7, 1,2,3,4,5,6,7, 1,2,3,4,5,6,7, 1,2,3,4,5,6,7),
group = c("pi", "pi", "pi", "pi", "pi", "pi", "pi", "y", "y", "y", "y", "y", "y", "y", "m", "m", "m", "m", "m", "m", "m", "u", "u", "u", "u", "u", "u", "u"))
data %>% ggplot(aes(y = y,
x = x,
color = group)) +
geom_line(size = 1)
?runif
?seq
seq(0,1,1000)
seq(0,1,length.out=1000)
sort(c(1,12,4,5,6))
## requirements ########################
library(tidyverse)
n <- 1000
# model parameters - lowest and highest
# quality of car
q_low <- 0
q_high <- 1
# evaluations of buyer and seller
# IMPORTANT: buyer must be lower than seller
v_buyer <- 0.5
v_seller <- 0.4
sim_quality = sort(runif(n, q_low, q_high))
avg_quality <- rep(0, n)
avg_quality[1] <- sim_quality[1]
for (i in 2:n) {
avg_quality[i] <- (1/i)*((i-1)*avg_quality[i-1] + sim_quality[i])
}
sim_data <- data.frame(y = c(sim_quality, avg_quality),
x = c(sim_quality, sim_quality),
line_category = c(rep("indifference curve", n), rep("avg_quality", n)),
)
sim_data <- data.frame(y = c(sim_quality, avg_quality),
x = c(sim_quality, sim_quality),
line_category = c(rep("indifference curve", n), rep("avg_quality", n))
)
sim_data %>% ggplot(aes(x = x,
y = y,
group = line_category)) +
geom_line()
sim_data %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
# model parameters - lowest and highest
# quality of car
q_low <- 0.1
sim_quality = sort(runif(n, q_low, q_high))
avg_quality <- rep(0, n)
avg_quality[1] <- sim_quality[1]
for (i in 2:n) {
avg_quality[i] <- (1/i)*((i-1)*avg_quality[i-1] + sim_quality[i])
}
sim_data <- data.frame(y = c(sim_quality, avg_quality),
x = c(sim_quality, sim_quality),
line_category = c(rep("indifference curve", n), rep("avg_quality", n))
)
## plotting ###########################
sim_data %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_quality = sort(rnorm(0.5,1,n))
avg_quality <- rep(0, n)
avg_quality[1] <- sim_quality[1]
for (i in 2:n) {
avg_quality[i] <- (1/i)*((i-1)*avg_quality[i-1] + sim_quality[i])
}
sim_data <- data.frame(y = c(sim_quality, avg_quality),
x = c(sim_quality, sim_quality),
line_category = c(rep("indifference curve", n), rep("avg_quality", n))
)
## simulation #########################
sim_quality <- sort(rnorm(0.5,1,n))
avg_quality <- rep(0, n)
avg_quality[1] <- sim_quality[1]
## simulation #########################
sim_quality <- sort(rnorm(0.5,1,n))
?rnorm
## simulation #########################
sim_quality <- sort(rnorm(n,0.5,1))
avg_quality <- rep(0, n)
avg_quality[1] <- sim_quality[1]
for (i in 2:n) {
avg_quality[i] <- (1/i)*((i-1)*avg_quality[i-1] + sim_quality[i])
}
sim_data <- data.frame(y = c(sim_quality, avg_quality),
x = c(sim_quality, sim_quality),
line_category = c(rep("indifference curve", n), rep("avg_quality", n))
)
sim_data %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
?pois
?rpois
rpois(n, 1)
library(stats)
ggplot(rlnorm(1000)) + geom_density()
ggplot(data.frame(data= rlnorm(1000)) + geom_density()
)
ggplot(data.frame(data= rlnorm(1000)), aes(x=data)) + geom_density()
n <- 1000
# model parameters - lowest and highest
# quality of car
q_low <- 0.1
q_high <- 1
# evaluations of buyer and seller
# IMPORTANT: buyer must be lower than seller
v_buyer <- 0.5
v_seller <- 0.4
# abstracting data processing from distribution
# this way it is way easier to test the model on different distributions
post_processing <- function(sim_data) {
if (!is.vector(sim_data)) {
stop("error in post_processing, sim_data is not a vector")
}
if (!is.numeric(sim_data)) {
stop("error in post_processing, sim_data is not a numeric vector")
}
n <- length(sim_data)
sim_quality <- sort(sim_data)
avg_quality <- rep(0, n)
avg_quality[1] <- sim_quality[1]
for (i in 2:n) {
avg_quality[i] <- (1/i)*((i-1)*avg_quality[i-1] + sim_quality[i])
}
result <- data.frame(y = c(sim_quality, avg_quality),
x = c(sim_quality, sim_quality),
line_category = c(rep("indifference curve", n), rep("avg_quality", n)))
return(result)
}
# simulation data
sim_unif <- runif(n, q_low, q_high)
# some of the destributions support R, in these cases, the lower and upper border
# do not bind
sim_norm <- rnorm(n, 0.5, 1)
sim_log_norm <- rlnorm(n)
sim_gamma <- rgamma(n,1)
# applying post_processing
sim_data_norm <- post_processing(sim_norm)
sim_data_unif <- post_processing(sim_unif)
sim_data_log_norm <- post_processing(sim_log_norm)
sim_data_gamma <- post_processing(sim_gamma)
sim_data_unif %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_log_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_gamma %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_unif %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_log_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_gamma %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_unif %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_norm <- sim_norm[sim_norm >= threshhold]
# filtering with threshhold
threshhold <- 0.1
sim_norm <- sim_norm[sim_norm >= threshhold]
sim_gamma <- sim_norm[sim_norm >= threshhold]
sim_log_norm <- sim_norm[sim_norm >= threshhold]
sim_data_norm <- post_processing(sim_norm)
sim_data_unif <- post_processing(sim_unif)
sim_data_log_norm <- post_processing(sim_log_norm)
sim_data_gamma <- post_processing(sim_gamma)
## plotting ###########################
sim_data_unif %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_log_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_gamma %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
threshhold <- 0.2
sim_norm <- sim_norm[sim_norm >= threshhold]
sim_gamma <- sim_norm[sim_norm >= threshhold]
sim_log_norm <- sim_norm[sim_norm >= threshhold]
sim_data_norm <- post_processing(sim_norm)
sim_data_unif <- post_processing(sim_unif)
sim_data_log_norm <- post_processing(sim_log_norm)
sim_data_gamma <- post_processing(sim_gamma)
sim_data_unif %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_log_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_gamma %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
## requirements ########################
library(tidyverse)
library(stats)
## model-parameters ####################
# size of simulation
n <- 1000
# model parameters - lowest and highest
# quality of car
q_low <- 0.1
q_high <- 1
# evaluations of buyer and seller
# IMPORTANT: buyer must be lower than seller, otherwise it is
#   not rational to trade.
v_buyer <- 0.5
v_seller <- 0.4
# abstracting data processing from distribution
# this way it is way easier to test the model on different distributions
post_processing <- function(sim_data) {
if (!is.vector(sim_data)) {
stop("error in post_processing, sim_data is not a vector")
}
if (!is.numeric(sim_data)) {
stop("error in post_processing, sim_data is not a numeric vector")
}
n <- length(sim_data)
sim_quality <- sort(sim_data)
avg_quality <- rep(0, n)
avg_quality[1] <- sim_quality[1]
for (i in 2:n) {
avg_quality[i] <- (1/i)*((i-1)*avg_quality[i-1] + sim_quality[i])
}
result <- data.frame(y = c(sim_quality, avg_quality),
x = c(sim_quality, sim_quality),
line_category = c(rep("indifference curve", n), rep("avg_quality", n)))
return(result)
}
# simulation data
sim_unif <- runif(n, q_low, q_high)
# some of the destributions support R, in these cases, the lower and upper border
# do not bind
sim_norm <- rnorm(n, 0.5, 1)
sim_log_norm <- rlnorm(n)
sim_gamma <- rgamma(n,1)
# filtering with threshhold
threshhold <- 0.2
sim_norm <- sim_norm[sim_norm >= threshhold]
sim_gamma <- sim_norm[sim_norm >= threshhold]
sim_log_norm <- sim_norm[sim_norm >= threshhold]
# applying post_processing
sim_data_norm <- post_processing(sim_norm)
sim_data_unif <- post_processing(sim_unif)
sim_data_log_norm <- post_processing(sim_log_norm)
sim_data_gamma <- post_processing(sim_gamma)
sim_data_unif %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
sim_data_norm %>% ggplot(aes(x = x,
y = y,
group = line_category,
color = line_category)) +
geom_line()
## Requirements ################################################################
library(tidyverse)
## Data import #################################################################
cycling_data <- read.csv2("./Data/cyclist_counts.csv")
location_data <- read.csv2("./Data/locations_of_count.csv")
location_data <- read.csv2("./Data/locations_of_count.csv")
location_data <- read.csv2("./Data/locations_of_count.csv")
## Requirements ################################################################
library(tidyverse)
library(hms)
## Requirements ################################################################
library(tidyverse)
c(1,2,F,T)
c("hey", "ho", "lets go", 0,1,2)
c(1,2,3,4)
a <- c(1,2,3,4,5)
seq(along = a)
b <- data.frame(test = c(1,2,3,4,5))
seq(along = b)
b$new <- c(1,2,3,4,5)
seq(along = b)
seq(along = b$new)
seq(along = b$new, by = 2)
m <- matrix(c(F,T,T,T),2,2)
which(m)
which(m, drop = F)
list(c(1,2,3), T)
?scan
?apply
times_two <- function(a) {return 2*a}
times_two <- function(a) {return 2*a}
times_two <- function(a) {return 2*a}
times_two <- function(a) {return 2*a}
times_two <- function(a) {return(2*a)}
apply(c(1,2,3,4,5), times_two)
install.packages("knitr")
r -v
verison
version
setwd("C:/Users/carst/Desktop/Data Science Master/Semester 1/Stat in Tox I/Exercises/sheet 1")
knitr::opts_chunk$set(echo = TRUE)
# use the setwd(...) function if necessary.
load("./data/VPAData-Random.Rda")
View(randomVPA)
?head()
# use the setwd(...) function if necessary.
load("./data/VPAData-Random.Rda")
head(randomVPA)
